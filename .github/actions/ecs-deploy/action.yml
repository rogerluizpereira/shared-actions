name: "ECR Push"
description: "Push a Docker images to Amazon ECR"
inputs:
  aws-access-key-id:
    description: "AWS Access Key ID"
    required: true
  aws-secret-access-key:
    description: "AWS Secret Access Key"
    required: true
  aws-session-token:
    description: "AWS temporary token"
    required: false
    default: ""
  aws-account:
    description: "AWS Account"
    required: true    
  aws-region:
    description: "AWS Region"
    required: true
  aws-ecs-cluster:
    description: "AWS ECS Cluster"
    required: true
  aws-ecs-service:
    description: "AWS ECS Service"
    required: true
  image-name:
    description: "ECR Image ( and Repository ) Name"
    required: true
  image-tag:
    description: "Tag for the Docker image"
    required: false
    default: "latest"
  environment-tag:
    description: "Tag for the environment"
    required: false
    default: "latest"
  environment:
    description: "Verificar se é necessário mesmo, ou podemos pegar de outro lugar"
    required: false
    default: "prd"

runs:
  using: "composite"

  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-session-token: ${{ inputs.aws-session-token }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Pull the image from ECR
      shell: bash
      run: |
        docker pull ${{ inputs.aws-account }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.aws-ecs-service }}:${{ inputs.image-tag }}

    - name: "Push Retagged Docker Image to ECR"
      shell: bash
      run: |
        ECR_URI="${{ inputs.aws-account }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.aws-ecs-service }}"
        docker tag $ECR_URI:${{ inputs.image-tag }} $ECR_URI:${{ inputs.environment-tag }}
        docker push --all-tags $ECR_URI

    - name: Gerenerate task-defitition from template
      # The action amazon-ecs-render-task-definition@v1, don't support all properties needed 
      shell: bash
      run: |
      
        sed -e "s|\$environment|${{ inputs.environment }}|g" \
            -e "s|\$container_name|${{ inputs.image-name }}|g" \
            -e "s|\$image_name|${{ inputs.aws-account }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.aws-ecs-service }}:${{ inputs.image-tag }}|g" \
            -e "s|\$task_role_arn|arn:aws:iam::${{ inputs.aws-account }}:role/${{ inputs.aws-ecs-service }}|g" \
            -e "s|\$execution_role_arn|arn:aws:iam::${{ inputs.aws-account }}:role/ecsTaskExecutionRole|g" \
            ${{ github.action_path }}/task-definition.json > task-definition.json

    - name: check
      shell: bash
      run: |
        cat task-definition.json

    # - name: Deploy to ECS
    #   id: deploy
    #   #if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v2
    #   with:
    #     cluster: ${{ inputs.aws-ecs-cluster }}
    #     service: ${{ inputs.aws-ecs-service }}
    #     #task-definition: ${{ inputs.aws-ecs-task-definition }}
    #     task-definition: ${{ steps.render-task.outputs.task-definition }}
    #     wait-for-service-stability: false

    # - name: Verify Deployment Status 
    #   shell: bash
    #   run: |
    #     TIMEOUT=1200  # Tempo máximo de espera em segundos
    #     INTERVAL=10  # Intervalo entre as verificações, em segundos
    #     ELAPSED=0
    #     echo "Starting deployment status check for service: ${{ inputs.aws-ecs-service }} in cluster: ${{ inputs.aws-ecs-cluster }} task-definition: ${{ steps.deploy.outputs.task-definition-arn }}"
    #     while [ $ELAPSED -lt $TIMEOUT ]; do
    #       # Obter status da implantação principal
    #       STATUS=$(aws ecs describe-services \
    #                 --cluster ${{ inputs.aws-ecs-cluster }} \
    #                 --services ${{ inputs.aws-ecs-service }} \
    #                 --query 'services[0].deployments[?taskDefinition==`${{ steps.deploy.outputs.task-definition-arn }}`].rolloutState' \
    #                 --output text)
    #       echo "$(date '+%H:%M:%S') - Current rollout state: $STATUS"
    #       # Verificar os estados finais
    #       if [ "$STATUS" == "COMPLETED" ]; then
    #         echo "Deployment succeeded!"
    #         exit 0
    #       elif [ "$STATUS" == "FAILED" ] || [ "$STATUS" == "ROLLED_BACK" ]; then
    #         echo "Deployment failed or rolled back. Rollout state: $STATUS"
    #         exit 1
    #       fi
    #       # Aguardar o próximo ciclo de verificação
    #       sleep $INTERVAL
    #       ELAPSED=$((ELAPSED + INTERVAL))
    #     done
    #     echo "Deployment status check timed out after $TIMEOUT seconds."
    #     exit 1