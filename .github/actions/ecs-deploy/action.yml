name: "ECR Push"
description: "Push a Docker images to Amazon ECR"
inputs:
  aws-access-key-id:
    description: "AWS Access Key ID"
    required: true
  aws-secret-access-key:
    description: "AWS Secret Access Key"
    required: true
  aws-session-token:
    description: "AWS temporary token"
    required: false
    default: ""
  aws-account:
    description: "AWS Account"
    required: true    
  aws-region:
    description: "AWS Region"
    required: true
  aws-ecs-cluster:
    description: "AWS ECS Cluster"
    required: true
  aws-ecs-service:
    description: "AWS ECS Service"
    required: true
  image-name:
    description: "ECR Image ( and Repository ) Name"
    required: true
  image-tag:
    description: "Tag for the Docker image"
    required: false
    default: "latest"
  environment-tag:
    description: "Tag for the environment"
    required: false
    default: "latest"

runs:
  using: "composite"

  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-session-token: ${{ inputs.aws-session-token }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Pull the image from ECR
      shell: bash
      run: |
        docker pull ${{ inputs.aws-account }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.image-name }}:${{ inputs.image-tag }}

    - name: "Push Retagged Docker Image to ECR"
      shell: bash
      run: |
        ECR_URI="${{ inputs.aws-account }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.image-name }}"
        docker tag $ECR_URI:${{ inputs.image-tag }} $ECR_URI:${{ inputs.environment-tag }}
        docker push --all-tags $ECR_URI

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: render-task
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: actions/ecs-deploy/task-definition.json
        container-name: ${{ inputs.image-name }}
        image: "${{ inputs.aws-account }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.image-name }}:${{ inputs.image-tag }}"
        environment-variables: |
            LOG_LEVEL=info
            ENVIRONMENT=prd
            AWS_DEFAULT_REGION=${{ inputs.aws-region }}
        log-configuration-log-driver: awslogs
        log-configuration-options: |
          awslogs-create-group=true
          awslogs-stream-prefix=ecs
          awslogs-group=/ecs/${{ inputs.image-name }}
          awslogs-region=${{ inputs.aws-region }}
        #taskRoleArn: "arn:aws:iam::572711339557:role/Jiralert-Service"
        #executionRoleArn: "arn:aws:iam::572711339557:role/ecsTaskExecutionRole"          
        #tags: |
        #    managed-by=github
        #    environment=prd

    - name: Deploy to ECS
      id: deploy
      #if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        cluster: ${{ inputs.aws-ecs-cluster }}
        service: ${{ inputs.aws-ecs-service }}
        #task-definition: ${{ inputs.aws-ecs-task-definition }}
        task-definition: ${{ steps.render-task.outputs.task-definition }}
        wait-for-service-stability: false

    - name: Verify Deployment Status 
      shell: bash
      run: |
        TIMEOUT=1200  # Tempo máximo de espera em segundos
        INTERVAL=10  # Intervalo entre as verificações, em segundos
        ELAPSED=0
        echo "Starting deployment status check for service: ${{ inputs.aws-ecs-service }} in cluster: ${{ inputs.aws-ecs-cluster }} task-definition: ${{ steps.deploy.outputs.task-definition-arn }}"
        while [ $ELAPSED -lt $TIMEOUT ]; do
          # Obter status da implantação principal
          STATUS=$(aws ecs describe-services \
                    --cluster ${{ inputs.aws-ecs-cluster }} \
                    --services ${{ inputs.aws-ecs-service }} \
                    --query 'services[0].deployments[?taskDefinition==`${{ steps.deploy.outputs.task-definition-arn }}`].rolloutState' \
                    --output text)
          echo "$(date '+%H:%M:%S') - Current rollout state: $STATUS"
          # Verificar os estados finais
          if [ "$STATUS" == "COMPLETED" ]; then
            echo "Deployment succeeded!"
            exit 0
          elif [ "$STATUS" == "FAILED" ] || [ "$STATUS" == "ROLLED_BACK" ]; then
            echo "Deployment failed or rolled back. Rollout state: $STATUS"
            exit 1
          fi
          # Aguardar o próximo ciclo de verificação
          sleep $INTERVAL
          ELAPSED=$((ELAPSED + INTERVAL))
        done
        echo "Deployment status check timed out after $TIMEOUT seconds."
        exit 1