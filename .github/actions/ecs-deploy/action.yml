name: "ECR Push"
description: "Push a Docker images to Amazon ECR"
inputs:
  aws-access-key-id:
    description: "AWS Access Key ID"
    required: true
  aws-secret-access-key:
    description: "AWS Secret Access Key"
    required: true
  aws-session-token:
    description: "AWS temporary token"
    required: false
    default: ""
  aws-account:
    description: "AWS Account"
    required: true    
  aws-region:
    description: "AWS Region"
    required: true
  aws-ecs-cluster:
    description: "AWS ECS Cluster"
    required: true
  aws-ecs-service:
    description: "AWS ECS Service"
    required: true
  aws-ecs-task-definition:
    description: "AWS ECS Task Definition"
    required: true
  image-name:
    description: "ECR Image ( and Repository ) Name"
    required: true
  image-tag:
    description: "Tag for the Docker image"
    required: false
    default: "latest"
  environment-tag:
    description: "Tag for the environment"
    required: false
    default: "latest"

runs:
  using: "composite"

  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-session-token: ${{ inputs.aws-session-token }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Pull the image from ECR
      shell: bash
      run: |
        docker pull ${{ inputs.aws-account }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.image-name }}:${{ inputs.image-tag }}

    - name: "Push Retagged Docker Image to ECR"
      shell: bash
      run: |
        ECR_URI="${{ inputs.aws-account }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.image-name }}"
        docker tag ${{ inputs.image-name }}:${{ inputs.image-tag }} $ECR_URI:${{ inputs.environment-tag }}
        docker push --all-tags $ECR_URI

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-definition
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definition.json
    #     container-name: my-container
    #     image: ${{ inputs.image-name }}:${{ inputs.image-tag }}

    - name: Deploy to ECS
      #if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        cluster: ${{ inputs.aws-ecs-cluster }}
        service: ${{ inputs.aws-ecs-service }}
        task-definition: ${{ inputs.aws-ecs-task-definition }}
        wait-for-service-stability: true