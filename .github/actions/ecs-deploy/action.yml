name: "ECR Push"
description: "Push a Docker images to Amazon ECR"
inputs:
  aws-access-key-id:
    description: "AWS Access Key ID"
    required: true
  aws-secret-access-key:
    description: "AWS Secret Access Key"
    required: true
  aws-session-token:
    description: "AWS temporary token"
    required: false
    default: ""
  aws-account:
    description: "AWS Account"
    required: true    
  aws-region:
    description: "AWS Region"
    required: true
  aws-ecs-cluster:
    description: "AWS ECS Cluster"
    required: true
  aws-ecs-service:
    description: "AWS ECS Service"
    required: true
  environment:
    description: "Environment to deploy the version"
    required: true
  version:
    description: "Version of the docker image to deploy"
    required: true
  containerPort:
      description: "Container port to be used in the task definition"
      required: false
      default: "80"
  containerHostPort:
      description: "Host port to be used in the task definition"
      required: false
      default: "0"
  container_cpu:
      description: "Container CPU to be used in the task definition"
      required: false
      default: "128"
  container_memory_reservation:
      description: "Container Memory Reservation to be used in the task definition"
      required: false
      default: "128"      
  container_memory:
      description: "Container Memory to be used in the task definition"
      required: false
      default: "128"
  task_cpu:
      description: "Task CPU to be used in the task definition"
      required: false
      default: "128"
  task_memory:
      description: "Task Memory to be used in the task definition"
      required: false
      default: "128"
  environment_vars:
      description: "Environment variables to be used in the task definition"
      required: false
      default: "[]"


runs:
  using: "composite"

  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-session-token: ${{ inputs.aws-session-token }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Pull the image from ECR
      shell: bash
      run: |
        echo "Pulling image from ECR"
        docker pull ${{ inputs.aws-account }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.aws-ecs-service }}:${{ inputs.version }}

    - name: Generate task-definition from template
      # The action amazon-ecs-render-task-definition@v1, don't support all properties needed 
      shell: bash
      run: |
        jq \
          --arg environment "${{ inputs.environment }}" \
          --arg service_name "${{ inputs.aws-ecs-service }}" \
          --arg image_name "${{ inputs.aws-account }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.aws-ecs-service }}:${{ inputs.version }}" \
          --arg task_role_arn "arn:aws:iam::${{ inputs.aws-account }}:role/${{ inputs.environment }}-${{ inputs.aws-ecs-service }}" \
          --arg execution_role_arn "arn:aws:iam::${{ inputs.aws-account }}:role/ecsTaskExecutionRole" \
          --arg region "${{ inputs.aws-region }}" \
          '
          .family = $service_name
          | .containerDefinitions[0].name  = $service_name
          | .containerDefinitions[0].image = $image_name

          # ENV: upsert (anexa e deduplica por "name")
          | .containerDefinitions[0].environment = (
              (
                .containerDefinitions[0].environment
                | if type=="array" then . else [] end
              )
              + [
                  {name:"AWS_DEFAULT_REGION", value:$region},
                  {name:"APP_ENV",           value:$environment}
                ]
              | sort_by(.name) | group_by(.name) | map(last)
            )

          # Logs
          | .containerDefinitions[0].logConfiguration.options."awslogs-group"  = ("/ecs/" + $environment + "/" + $service_name)
          | .containerDefinitions[0].logConfiguration.options."awslogs-region" = $region

          # Roles
          | .taskRoleArn      = $task_role_arn
          | .executionRoleArn = $execution_role_arn

          # TAGS: upsert (dedupe por "key")
          | .tags = (
              (
                .tags
                | if type=="array" then . else [] end
              )
              + [{key:"environment", value:$environment}]
              | sort_by(.key) | group_by(.key) | map(last)
            )
          ' \
          "${{ github.action_path }}/task-definition.json" > task-definition-mandatory.json

    - name: Update task-definition with optional properties 
      shell: bash
      run: |
        echo "Updating task definition with optional properties"
        echo '${{ inputs.environment_vars }}' > extra_env_vars.json

        jq --slurpfile extra_env_vars extra_env_vars.json '
          .containerDefinitions[0].environment =
            ((.containerDefinitions[0].environment // []) + ($extra_env_vars[0] // []))
          ' task-definition-mandatory.json > task-definition.json

        echo "Sannity check of the generated task definition:"
        cat task-definition.json

    - name: Deploy to ECS
      id: deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        cluster: ${{ inputs.aws-ecs-cluster }}
        service: ${{ inputs.aws-ecs-service }}
        task-definition: task-definition.json
        wait-for-service-stability: false

    - name: Verify Deployment Status 
      shell: bash
      run: |
        echo "Verifying Deployment Status"
        TIMEOUT=1200  # Tempo máximo de espera em segundos
        INTERVAL=10  # Intervalo entre as verificações, em segundos
        ELAPSED=0
        echo "Starting deployment status check for service: ${{ inputs.aws-ecs-service }} in cluster: ${{ inputs.aws-ecs-cluster }} task-definition: ${{ steps.deploy.outputs.task-definition-arn }}"
        while [ $ELAPSED -lt $TIMEOUT ]; do
          STATUS=$(aws ecs describe-services \
                    --cluster ${{ inputs.aws-ecs-cluster }} \
                    --services ${{ inputs.aws-ecs-service }} \
                    --query 'services[0].deployments[?taskDefinition==`${{ steps.deploy.outputs.task-definition-arn }}`].rolloutState' \
                    --output text)
          echo "$(date '+%H:%M:%S') - Current rollout state: $STATUS"
          # Verificar os estados finais
          if [ "$STATUS" == "COMPLETED" ]; then
            echo "Deployment succeeded!"
            exit 0
          elif [ "$STATUS" == "FAILED" ] || [ "$STATUS" == "ROLLED_BACK" ]; then
            echo "Deployment failed or rolled back. Rollout state: $STATUS"
            exit 1
          fi
          # Aguardar o próximo ciclo de verificação
          sleep $INTERVAL
          ELAPSED=$((ELAPSED + INTERVAL))
        done
        echo "Deployment status check timed out after $TIMEOUT seconds."
        exit 1

    - name: "Push Retagged Docker Image to ECR"
      shell: bash
      run: |
        echo "Retaging image on ECR with environment tag" 
        ECR_URI="${{ inputs.aws-account }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.aws-ecs-service }}"
        docker tag $ECR_URI:${{ inputs.version }} $ECR_URI:${{ inputs.environment }}
        docker push --all-tags $ECR_URI